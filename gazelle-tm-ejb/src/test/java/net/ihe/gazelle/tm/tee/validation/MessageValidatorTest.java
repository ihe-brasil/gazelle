/**
 *
 */
package net.ihe.gazelle.tm.tee.validation;

import net.ihe.gazelle.hql.providers.EntityManagerService;
import net.ihe.gazelle.junit.AbstractTestQueryJunit4;
import net.ihe.gazelle.tm.tee.model.ValidationService;
import net.ihe.gazelle.tm.tee.model.ValidationServiceEnum;
import org.junit.After;
import org.junit.Before;
import org.junit.Ignore;
import org.junit.Test;

import javax.persistence.EntityManager;
import javax.persistence.Query;

import static org.junit.Assert.assertNotNull;

/**
 * @author rchitnis
 */
@Ignore
public class MessageValidatorTest extends AbstractTestQueryJunit4 {

    private static final String HL7_VERSION_2dot3dot1 = "2.3.1";
    private static final String HL7_VERSION_2dot5 = "2.5";
    private static final String HL7_VERSION_2dot5dot1 = "2.5.1";

    private static final String ITI_DOMAIN = "ITI";

    private static final String PIX_SOURCE_ACTOR = "PAT_IDENTITY_SRC";
    private static final String PIX_MANAGER_ACTOR = "PAT_IDENTITY_X_REF_MGR";
    private static final String PIX_CONSUMER_ACTOR = "PAT_IDENTITY_CONSUMER";
    private static final String PAT_DEMOGRAPHIC_CONSUMER_ACTOR = "PDC";
    private static final String PAT_DEMOGRAPHIC_SUPPLIER_ACTOR = "PDS";

    // **************************************************************
    // PIX Feed - start
    // **************************************************************
    // transaction
    private static final String PIX_FEED_TRANSACTION = "ITI-8";

    // request message types
    private static final String PIX_FEED_PATIENT_ADMIT_MSG_TYPE = "ADT_A01";
    private static final String PIX_FEED_PATIENT_REGISTER_MSG_TYPE = "ADT_A04";
    private static final String PIX_FEED_PATIENT_PRE_ADMIT_MSG_TYPE = "ADT_A05";
    private static final String PIX_FEED_PATIENT_UPDATE_MSG_TYPE = "ADT_A08";
    private static final String PIX_FEED_PATIENT_MERGE_MSG_TYPE = "ADT_A40";

    // response message types
    private static final String PIX_FEED_PATIENT_ADMIT_ACK_MSG_TYPE = "ACK_A01";
    private static final String PIX_FEED_PATIENT_REGISTER_ACK_MSG_TYPE = "ACK_A04";
    private static final String PIX_FEED_PATIENT_PRE_ADMIT_ACK_MSG_TYPE = "ACK_A05";
    private static final String PIX_FEED_PATIENT_UPDATE_ACK_MSG_TYPE = "ACK_A08";
    private static final String PIX_FEED_PATIENT_MERGE_ACK_MSG_TYPE = "ACK_A40";

    // request messages generated by gazelle simulator at http://gazelle.ihe.net/PatientManager/home.seam
    private static final String PIX_FEED_PATIENT_ADMIT_MSG =
            "MSH|^~\\&|PAMSimulator|IHE|PatientManager|IHE|20131202045804||ADT^A01^ADT_A01|20131202045804|P|2.3.1||||||UNICODE " +
                    "UTF-8\nEVN||20131202045804||||20131202045804\nPID|||DDS-45003^^^DDS&1.3.6.1.4.1.12559.11.1.4.1.2&ISO^PI||Worden^Devon^^^^^L" +
                    "|Carrington^^^^^^M|19380129071053|F|||Southwest 66th " +
                    "Way^^Davie^Florida^33314^USA|||||||3005^^^IHEPAM&1.3.6.1.4.1.12559.11.1.2.2.5&ISO^AN\nPV1|||||||||||||||||||3006^^^IHEPAM" +
                    "&1.3.6.1.4.1.12559.11.1.2.2.5&ISO^VN||||||||||||||||||||||||||||||||V";
    private static final String PIX_FEED_PATIENT_REGISTER_MSG =
            "MSH|^~\\&|PAMSimulator|IHE|PatientManager|IHE|20131202053348||ADT^A04^ADT_A01|20131202053348|P|2.3.1||||||UNICODE " +
                    "UTF-8\nEVN||20131202053348||||20131202053348\nPID|||DDS-45005^^^DDS&1.3.6.1.4.1.12559.11.1.4.1.2&ISO^PI||Kozak^Digna^^^^^L" +
                    "|Stevenson^^^^^^M|20120713060327|F|||Main " +
                    "Street^^Winchester^Massachusetts^01890^USA|||||||3008^^^IHEPAM&1.3.6.1.4.1.12559.11.1.2.2.5&ISO^AN\nPV1|||||||||||||||||||3009" +
                    "^^^IHEPAM&1.3.6.1.4.1.12559.11.1.2.2.5&ISO^VN||||||||||||||||||||||||||||||||V";
    private static final String PIX_FEED_PATIENT_PRE_ADMIT_MSG =
            "MSH|^~\\&|PAMSimulator|IHE|PatientManager|IHE|20131202055659||ADT^A05^ADT_A01|20131202055659|P|2.3.1||||||UNICODE " +
                    "UTF-8\nEVN||20131202055659||||20131202055659\nPID|||DDS-45008^^^DDS&1.3.6.1.4.1.12559.11.1.4.1.2&ISO^PI||Rock^Lacresha^^^^^L" +
                    "|Jung^^^^^^M|19390204021607|F|||1st Street^^Spring^Texas^77373^USA|||||||3012^^^IHEPAM&1.3.6.1.4.1.12559.11.1.2.2.5&ISO^AN" +
                    "\nPV1|||||||||||||||||||3013^^^IHEPAM&1.3.6.1.4.1.12559.11.1.2.2.5&ISO^VN||||||||||||||||||||||||||||||||V";

    // sample request messages at https://www.projects.openhealthtools.org/sf/go/page1055
    private static final String PIX_FEED_PATIENT_UPDATE_MSG =
            "MSH|^~\\&|OTHER_IBM_BRIDGE_TLS|IBM|PAT_IDENTITY_X_REF_MGR_MISYS|ALLSCRIPTS|20090224104204-0600||ADT^A08^ADT_A01|9241351356666182528|P" +
                    "|2.3.1||||||UNICODE UTF-8\nEVN||20090224104204-0600\nPID|||103^^^IBOT&1.3.6.1.4.1.21367.2009.1.2.370&ISO||OTHER_IBM_BRIDGE" +
                    "^MARION||19661109|F\nPV1||O";
    private static final String PIX_FEED_PATIENT_MERGE_MSG =
            "MSH|^~\\&|OTHER_IBM_BRIDGE_TLS|IBM|PAT_IDENTITY_X_REF_MGR_MISYS|ALLSCRIPTS|20090224104210-0600||ADT^A40^ADT_A39|4143361005927619863|P" +
                    "|2.3.1||||||UNICODE UTF-8\nEVN||20090224104210-0600\nPID|||103^^^IBOT&1.3.6.1.4.1.21367.2009.1.2.370&ISO||OTHER_IBM_BRIDGE" +
                    "^MARION||19661109|F MRG|102^^^IBOT&1.3.6.1.4.1.21367.2009.1.2.370&ISO\nPV1||O";

    // sample request messages provided by NIST PIX PDQ tool at http://pixpdqtests.nist.gov:8080/
    private static final String PIX_FEED_PATIENT_ADMIT_MSG_NIST =
            "MSH|^~\\&|SendingApplication|SendingFacility|ReceivingApplication|ReceivingFacility|20101004144709||ADT^A01^ADT_A01|NIST" +
                    "-101004144709009|P|2.3.1\nEVN||20101004144709\nPID|||PIX^^^NIST2010&2.16.840.1.113883.3.72.5.9.1&ISO||ALPHA^ALAN^^^^^L|BARNES" +
                    "^^^^^^L|19781208|M|||820 JORIE BLVD^^NEW YORK CITY^NY^10503||||||||153-12-5432\nPV1||I";
    private static final String PIX_FEED_PATIENT_REGISTER_MSG_NIST =
            "MSH|^~\\&|SendingApplication|SendingFacility|ReceivingApplication|ReceivingFacility|20101004144709||ADT^A04^ADT_A01|NIST" +
                    "-101004144709009|P|2.3.1\nEVN||20101004144709\nPID|||PIX^^^NIST2010&2.16.840.1.113883.3.72.5.9.1&ISO||ALPHA^ALAN^^^^^L|BARNES" +
                    "^^^^^^L|19781208|M|||820 JORIE BLVD^^NEW YORK CITY^NY^10503||||||||153-12-5432\nPV1||O";
    private static final String PIX_FEED_PATIENT_PRE_ADMIT_MSG_NIST =
            "MSH|^~\\&|SendingApplication|SendingFacility|ReceivingApplication|ReceivingFacility|20101004144709||ADT^A05^ADT_A01|NIST" +
                    "-101004144709009|P|2.3.1\nEVN||20101004144709\nPID|||PIX^^^NIST2010&2.16.840.1.113883.3.72.5.9.1&ISO||ALPHA^ALAN^^^^^L|BARNES" +
                    "^^^^^^L|19781208|M|||820 JORIE BLVD^^NEW YORK CITY^NY^10503||||||||153-12-5432\nPV1||P";
    private static final String PIX_FEED_PATIENT_UPDATE_MSG_NIST =
            "MSH|^~\\&|SendingApplication|SendingFacility|ReceivingApplication|ReceivingFacility|20090527135020||ADT^A08^ADT_A01|NIST" +
                    "-090527135016929|P|2.3.1\nEVN||20090527\nPID|||PIX^^^NIST2010&2.16.840.1.113883.3.72.5.9.1&ISO||TAU^TERI^^^^^L||19780510" +
                    "||||202 KEN HABOR^^NEW YORK CITY^NY^61000\nPV1||R";
    private static final String PIX_FEED_PATIENT_MERGE_MSG_NIST =
            "MSH|^~\\&|SendingApplication|SendingFacility|ReceivingApplication|ReceivingFacility|20090528110025||ADT^A40^ADT_A39|NIST" +
                    "-090528110022806|P|2.3.1\nEVN||20090528\nPID|||PIXL^^^NIST2010&2.16.840.1.113883.3.72.5.9.1&ISO||LINCOLN^MARY^^^^^L\nMRG|PIXW" +
                    "^^^NIST2010&2.16.840.1.113883.3.72.5.9.1&ISO||||||WASHINGTON^MARY^^^^^L";

    // response messages generated by gazelle simulator at http://gazelle.ihe.net/PatientManager/home.seam
    private static final String PIX_FEED_PATIENT_ADMIT_ACK_MSG =
            "MSH|^~\\&|PatientManager|IHE|PAMSimulator|IHE|20131202165805||ACK^A01^ACK|20131202165805|P|2.3.1||||||UNICODE " +
                    "UTF-8\nMSA|AA|20131202045804";
    private static final String PIX_FEED_PATIENT_REGISTER_ACK_MSG =
            "MSH|^~\\&|PatientManager|IHE|PAMSimulator|IHE|20131202173348||ACK^A04^ACK|20131202173348|P|2.3.1||||||UNICODE " +
                    "UTF-8\nMSA|AA|20131202053348";
    private static final String PIX_FEED_PATIENT_PRE_ADMIT_ACK_MSG =
            "MSH|^~\\&|PatientManager|IHE|PAMSimulator|IHE|20131202175659||ACK^A05^ACK|20131202175659|P|2.3.1||||||UNICODE " +
                    "UTF-8\nMSA|AA|20131202055659";

    // sample response messages at https://www.projects.openhealthtools.org/sf/go/page1055
    private static final String PIX_FEED_PATIENT_UPDATE_ACK_MSG =
            "MSH|^~\\&|PAT_IDENTITY_X_REF_MGR_MISYS_TLS|ALLSCRIPTS|OTHER_IBM_BRIDGE_TLS|IBM|20090224114207-0500||ACK^A08" +
                    "|OpenPIXPDQ10.243.0.65.19767899641219|P|2.3.1||||||UNICODE UTF-8\nMSA|AA|9241351356666182528";
    private static final String PIX_FEED_PATIENT_MERGE_ACK_MSG =
            "MSH|^~\\&|PAT_IDENTITY_X_REF_MGR_MISYS_TLS|ALLSCRIPTS|OTHER_IBM_BRIDGE_TLS|IBM|20090224114212-0500||ACK^A40" +
                    "|OpenPIXPDQ10.243.0.65.19767899725457|P|2.3.1||||||UNICODE UTF-8\nMSA|AA|4143361005927619863";

    // **************************************************************
    // PIX Feed - end
    // **************************************************************

    // **************************************************************
    // PIX Update - start
    // **************************************************************
    // transaction
    private static final String PIX_UPDATE_TRANSACTION = "ITI-10";
    private static final String PIX_UPDATE_ACK_TRANSACTION = "ITI-30";

    // request message type
    private static final String PIX_UPDATE_MSG_TYPE = "ADT_A31";

    // response message type
    private static final String PIX_UPDATE_MSG_ACK_TYPE = "ACK";

    // request message generated by gazelle simulator at http://gazelle.ihe.net/PatientManager/home.seam
    private static final String PIX_UPDATE_MSG = "MSH|^~\\&|PatientManager|IHE|PatientManager|IHE|20131203153056||ADT^A31^ADT_A05|20131203153056|P" +
            "|2.5||||||UNICODE UTF-8\nEVN||20131203153056\nPID|||06557411036092470264 " +
            "90^^^FR&1.2.250.1.213.1.4.2&ISO~DDS-38496^^^DDS&1.3.6.1.4.1.12559.11.1.4.1.2&ISO|| ^^^^^^S\nPV1||N";

    // response message generated by gazelle simulator at http://gazelle.ihe.net/PatientManager/home.seam
    private static final String PIX_UPDATE_ACK_MSG = "MSH|^~\\&|PatientManager|IHE|PatientManager|IHE|20131203153056||ACK^A31^ACK|20131203153056|P" +
            "|2.5||||||UNICODE UTF-8\nMSA|AA|20131203153056";

    // **************************************************************
    // PIX Update - end
    // **************************************************************

    // **************************************************************
    // PIX Query - start
    // **************************************************************
    // transaction
    private static final String PIX_QUERY_TRANSACTION = "ITI-9";

    // request message type
    private static final String PIX_QUERY_MSG_TYPE = "QBP_Q23";

    // response message type
    private static final String PIX_QUERY_MSG_RSP_TYPE = "RSP_K23";

    // request message generated by gazelle simulator at http://gazelle.ihe.net/PatientManager/home.seam
    private static final String PIX_QUERY_MSG = "MSH|^~\\&|PatientManager|IHE|PatientManager|IHE|20131203153339||QBP^Q23^QBP_Q21|20131203153339|P" +
            "|2.5||||||UNICODE UTF-8\nQPD|IHE PIX Query|GazellePIXConsumer.20131203153339\nRCP|I";

    // sample request message provided by NIST PIX PDQ tool at http://pixpdqtests.nist.gov:8080/
    private static final String PIX_QUERY_MSG_NIST = "MSH|^~\\&|SendingApplication|SendingFacility|ReceivingApplication|ReceivingFacility" +
            "|20101004145353||QBP^Q23^QBP_Q21|NIST-101004145353138|P|2.5\nQPD|IHE PIX " +
            "Query|QRY1248968460880|PIXL1^^^NIST2010&2.16.840.1.113883.3.72.5.9.1&ISO|^^^NIST2010-3&2.16.840.1.113883.3.72.5.9.3&ISO\nRCP|I";

    // response message generated by gazelle simulator at http://gazelle.ihe.net/PatientManager/home.seam
    private static final String PIX_QUERY_RSP_MSG = "MSH|^~\\&|PatientManager|IHE|PatientManager|IHE|20131203153339||RSP^K23^RSP_K23|20131203153339" +
            "|P|2.5||||||UNICODE UTF-8\nMSA|AA|20131203153339\nQAK|GazellePIXConsumer.20131203153339|OK\nQPD|IHE PIX " +
            "Query|GazellePIXConsumer.20131203153339\nPID|||0906032764^^^DK&UNKNOWN&ISO~DDS-38993^^^DDS&1.3.6.1.4.1.12559.11.1.4.1.2&ISO||~^^^^^^S";

    // **************************************************************
    // PIX Query - end
    // **************************************************************

    // **************************************************************
    // PDC Query - start
    // **************************************************************
    // transaction
    private static final String PDQ_TRANSACTION = "ITI-21";

    // request message type
    private static final String PDQ_MSG_TYPE = "QBP_Q22";

    // response message type
    private static final String PDQ_MSG_RSP_TYPE = "RSP_K22";

    // request message generated by gazelle simulator at http://gazelle.ihe.net/PatientManager/home.seam
    private static final String PDQ_QUERY_MSG = "MSH|^~\\&|PatientManager|IHE|PDQPDS|IHE|20131203153650||QBP^Q22^QBP_Q21|20131203153650|P|2.5" +
            "||||||UNICODE UTF-8\nQPD|IHE PDQ Query|GazellePDQPDC.20131203153650|@PID.5.1.1^Rock\nRCP|I";

    // sample request message provided by NIST PIX PDQ tool at http://pixpdqtests.nist.gov:8080/
    private static final String PDQ_QUERY_MSG_NIST = "MSH|^~\\&|SendingApplication|SendingFacility|ReceivingApplication|RceivingFacility" +
            "|20101004143744||QBP^Q22^QBP_Q21|NIST-101004143744188|T|2.5\nQPD|IHE PDQ " +
            "Query|QRY124818486466|@PID.11.4^MD|||||^^^NIST2010&2.16.840.1.113883.3.72.5.9.1&ISO\nRCP|I";

    // response message generated by gazelle simulator at http://gazelle.ihe.net/PatientManager/home.seam
    private static final String PDQ_QUERY_RSP_MSG = "MSH|^~\\&|PDQPDS|IHE|PatientManager|IHE|20131203153650||RSP^K22^RSP_K21|20131203153650|P|2.5" +
            "||||||UNICODE UTF-8\nMSA|AA|20131203153650\nQAK|GazellePDQPDC.20131203153650|NF\nQPD|IHE PDQ " +
            "Query|GazellePDQPDC.20131203153650|@PID.5.1.1^Rock";

    // **************************************************************
    // PDC Query - end
    // **************************************************************

    private static EntityManager em = EntityManagerService.provideEntityManager();

    @Before
    public void init() throws Exception {
        super.setUp();
    }

    @After
    public void cleanup() throws Exception {
        super.tearDown();
    }

    @Test
    public void testValidatePIXFeedPatientAdmitWithGazelleEVS() {
        ValidationParameters param = populateTestData(ValidationServiceEnum.GAZELLEHL7V2VALIDATOR,
                ITI_DOMAIN, PIX_SOURCE_ACTOR, PIX_FEED_TRANSACTION, PIX_FEED_PATIENT_ADMIT_MSG_TYPE, HL7_VERSION_2dot3dot1,
                PIX_FEED_PATIENT_ADMIT_MSG);
        ValidationResults result = MessageValidator.validate(param);
        assertNotNull(result);
        assertNotNull(result.getValidationStatus());
    }

    @Test
    public void testValidatePIXFeedPatientRegisterWithGazelleEVS() {
        ValidationParameters param = populateTestData(ValidationServiceEnum.GAZELLEHL7V2VALIDATOR,
                ITI_DOMAIN, PIX_SOURCE_ACTOR, PIX_FEED_TRANSACTION, PIX_FEED_PATIENT_REGISTER_MSG_TYPE, HL7_VERSION_2dot3dot1,
                PIX_FEED_PATIENT_REGISTER_MSG);
        ValidationResults result = MessageValidator.validate(param);
        assertNotNull(result);
        assertNotNull(result.getValidationStatus());
    }

    @Test
    public void testValidatePIXFeedPatientPreAdmitWithGazelleEVS() {
        ValidationParameters param = populateTestData(ValidationServiceEnum.GAZELLEHL7V2VALIDATOR,
                ITI_DOMAIN, PIX_SOURCE_ACTOR, PIX_FEED_TRANSACTION, PIX_FEED_PATIENT_PRE_ADMIT_MSG_TYPE, HL7_VERSION_2dot3dot1,
                PIX_FEED_PATIENT_PRE_ADMIT_MSG);
        ValidationResults result = MessageValidator.validate(param);
        assertNotNull(result);
        assertNotNull(result.getValidationStatus());
    }

    @Test
    public void testValidatePIXFeedPatientUpdateWithGazelleEVS() {
        ValidationParameters param = populateTestData(ValidationServiceEnum.GAZELLEHL7V2VALIDATOR,
                ITI_DOMAIN, PIX_SOURCE_ACTOR, PIX_FEED_TRANSACTION, PIX_FEED_PATIENT_UPDATE_MSG_TYPE, HL7_VERSION_2dot3dot1,
                PIX_FEED_PATIENT_UPDATE_MSG);
        ValidationResults result = MessageValidator.validate(param);
        assertNotNull(result);
        assertNotNull(result.getValidationStatus());
    }

    @Test
    public void testValidatePIXFeedPatientMergeWithGazelleEVS() {
        ValidationParameters param = populateTestData(ValidationServiceEnum.GAZELLEHL7V2VALIDATOR,
                ITI_DOMAIN, PIX_SOURCE_ACTOR, PIX_FEED_TRANSACTION, PIX_FEED_PATIENT_MERGE_MSG_TYPE, HL7_VERSION_2dot3dot1,
                PIX_FEED_PATIENT_MERGE_MSG);
        ValidationResults result = MessageValidator.validate(param);
        assertNotNull(result);
        assertNotNull(result.getValidationStatus());
    }

    @Test
    public void testValidatePIXFeedPatientAdmitAckWithGazelleEVS() {
        ValidationParameters param = populateTestData(ValidationServiceEnum.GAZELLEHL7V2VALIDATOR,
                ITI_DOMAIN, PIX_MANAGER_ACTOR, PIX_FEED_TRANSACTION, PIX_FEED_PATIENT_ADMIT_ACK_MSG_TYPE, HL7_VERSION_2dot3dot1,
                PIX_FEED_PATIENT_ADMIT_ACK_MSG);
        ValidationResults result = MessageValidator.validate(param);
        assertNotNull(result);
        assertNotNull(result.getValidationStatus());
    }

    @Test
    public void testValidatePIXFeedPatientRegisterAckWithGazelleEVS() {
        ValidationParameters param = populateTestData(ValidationServiceEnum.GAZELLEHL7V2VALIDATOR,
                ITI_DOMAIN, PIX_MANAGER_ACTOR, PIX_FEED_TRANSACTION, PIX_FEED_PATIENT_REGISTER_ACK_MSG_TYPE, HL7_VERSION_2dot3dot1,
                PIX_FEED_PATIENT_REGISTER_ACK_MSG);
        ValidationResults result = MessageValidator.validate(param);
        assertNotNull(result);
        assertNotNull(result.getValidationStatus());
    }

    @Test
    public void testValidatePIXFeedPatientPreAdmitAckWithGazelleEVS() {
        ValidationParameters param = populateTestData(ValidationServiceEnum.GAZELLEHL7V2VALIDATOR,
                ITI_DOMAIN, PIX_MANAGER_ACTOR, PIX_FEED_TRANSACTION, PIX_FEED_PATIENT_PRE_ADMIT_ACK_MSG_TYPE, HL7_VERSION_2dot3dot1,
                PIX_FEED_PATIENT_PRE_ADMIT_ACK_MSG);
        ValidationResults result = MessageValidator.validate(param);
        assertNotNull(result);
        assertNotNull(result.getValidationStatus());
    }

    @Test
    public void testValidatePIXFeedPatientUpdateAckWithGazelleEVS() {
        ValidationParameters param = populateTestData(ValidationServiceEnum.GAZELLEHL7V2VALIDATOR,
                ITI_DOMAIN, PIX_MANAGER_ACTOR, PIX_FEED_TRANSACTION, PIX_FEED_PATIENT_UPDATE_ACK_MSG_TYPE, HL7_VERSION_2dot3dot1,
                PIX_FEED_PATIENT_UPDATE_ACK_MSG);
        ValidationResults result = MessageValidator.validate(param);
        assertNotNull(result);
        assertNotNull(result.getValidationStatus());
    }

    @Test
    public void testValidatePIXFeedPatientMergeAckWithGazelleEVS() {
        ValidationParameters param = populateTestData(ValidationServiceEnum.GAZELLEHL7V2VALIDATOR,
                ITI_DOMAIN, PIX_MANAGER_ACTOR, PIX_FEED_TRANSACTION, PIX_FEED_PATIENT_MERGE_ACK_MSG_TYPE, HL7_VERSION_2dot3dot1,
                PIX_FEED_PATIENT_MERGE_ACK_MSG);
        ValidationResults result = MessageValidator.validate(param);
        assertNotNull(result);
        assertNotNull(result.getValidationStatus());
    }

    @Test
    public void testValidatePIXUpdateWithGazelleEVS() {
        ValidationParameters param = populateTestData(ValidationServiceEnum.GAZELLEHL7V2VALIDATOR,
                ITI_DOMAIN, PIX_MANAGER_ACTOR, PIX_UPDATE_TRANSACTION, PIX_UPDATE_MSG_TYPE, HL7_VERSION_2dot5, PIX_UPDATE_MSG);
        ValidationResults result = MessageValidator.validate(param);
        assertNotNull(result);
        assertNotNull(result.getValidationStatus());
    }

    @Test
    public void testValidatePIXUpdateAckWithGazelleEVS() {
        ValidationParameters param = populateTestData(ValidationServiceEnum.GAZELLEHL7V2VALIDATOR,
                ITI_DOMAIN, PAT_DEMOGRAPHIC_CONSUMER_ACTOR, PIX_UPDATE_ACK_TRANSACTION, PIX_UPDATE_MSG_ACK_TYPE, HL7_VERSION_2dot5,
                PIX_UPDATE_ACK_MSG);
        ValidationResults result = MessageValidator.validate(param);
        assertNotNull(result);
        assertNotNull(result.getValidationStatus());
    }

    @Test
    public void testValidatePIXQueryWithGazelleEVS() {
        ValidationParameters param = populateTestData(ValidationServiceEnum.GAZELLEHL7V2VALIDATOR,
                ITI_DOMAIN, PIX_CONSUMER_ACTOR, PIX_QUERY_TRANSACTION, PIX_QUERY_MSG_TYPE, HL7_VERSION_2dot5, PIX_QUERY_MSG);
        ValidationResults result = MessageValidator.validate(param);
        assertNotNull(result);
        assertNotNull(result.getValidationStatus());
    }

    @Test
    public void testValidatePIXQueryRspWithGazelleEVS() {
        ValidationParameters param = populateTestData(ValidationServiceEnum.GAZELLEHL7V2VALIDATOR,
                ITI_DOMAIN, PIX_MANAGER_ACTOR, PIX_QUERY_TRANSACTION, PIX_QUERY_MSG_RSP_TYPE, HL7_VERSION_2dot5, PIX_QUERY_RSP_MSG);
        ValidationResults result = MessageValidator.validate(param);
        assertNotNull(result);
        assertNotNull(result.getValidationStatus());
    }

    @Test
    public void testValidatePDCQueryWithGazelleEVS() {
        ValidationParameters param = populateTestData(ValidationServiceEnum.GAZELLEHL7V2VALIDATOR,
                ITI_DOMAIN, PAT_DEMOGRAPHIC_CONSUMER_ACTOR, PDQ_TRANSACTION, PDQ_MSG_TYPE, HL7_VERSION_2dot5, PDQ_QUERY_MSG);
        ValidationResults result = MessageValidator.validate(param);
        assertNotNull(result);
        assertNotNull(result.getValidationStatus());
    }

    @Test
    public void testValidatePDCQueryRspWithGazelleEVS() {
        ValidationParameters param = populateTestData(ValidationServiceEnum.GAZELLEHL7V2VALIDATOR,
                ITI_DOMAIN, PAT_DEMOGRAPHIC_SUPPLIER_ACTOR, PDQ_TRANSACTION, PDQ_MSG_RSP_TYPE, HL7_VERSION_2dot5, PDQ_QUERY_RSP_MSG);
        ValidationResults result = MessageValidator.validate(param);
        assertNotNull(result);
        assertNotNull(result.getValidationStatus());
    }

    @Test
    public void testValidatePIXFeedPatientAdmitWithNISTEVS() {
        ValidationParameters param = populateTestData(ValidationServiceEnum.NISTHL7V2VALIDATOR,
                ITI_DOMAIN, PIX_SOURCE_ACTOR, PIX_FEED_TRANSACTION, PIX_FEED_PATIENT_ADMIT_MSG_TYPE, HL7_VERSION_2dot3dot1,
                PIX_FEED_PATIENT_ADMIT_MSG);
        ValidationResults result = MessageValidator.validate(param);
        assertNotNull(result);
        assertNotNull(result.getValidationStatus());
    }

    @Test
    public void testValidatePIXFeedPatientRegisterWithNISTEVS() {
        ValidationParameters param = populateTestData(ValidationServiceEnum.NISTHL7V2VALIDATOR,
                ITI_DOMAIN, PIX_SOURCE_ACTOR, PIX_FEED_TRANSACTION, PIX_FEED_PATIENT_REGISTER_MSG_TYPE, HL7_VERSION_2dot3dot1,
                PIX_FEED_PATIENT_REGISTER_MSG);
        ValidationResults result = MessageValidator.validate(param);
        assertNotNull(result);
        assertNotNull(result.getValidationStatus());
    }

    @Test
    public void testValidatePIXFeedPatientPreAdmitWithNISTEVS() {
        ValidationParameters param = populateTestData(ValidationServiceEnum.NISTHL7V2VALIDATOR,
                ITI_DOMAIN, PIX_SOURCE_ACTOR, PIX_FEED_TRANSACTION, PIX_FEED_PATIENT_PRE_ADMIT_MSG_TYPE, HL7_VERSION_2dot3dot1,
                PIX_FEED_PATIENT_PRE_ADMIT_MSG);
        ValidationResults result = MessageValidator.validate(param);
        assertNotNull(result);
        assertNotNull(result.getValidationStatus());
    }

    @Test
    public void testValidatePIXFeedPatientUpdateWithNISTEVS() {
        ValidationParameters param = populateTestData(ValidationServiceEnum.NISTHL7V2VALIDATOR,
                ITI_DOMAIN, PIX_SOURCE_ACTOR, PIX_FEED_TRANSACTION, PIX_FEED_PATIENT_UPDATE_MSG_TYPE, HL7_VERSION_2dot3dot1,
                PIX_FEED_PATIENT_UPDATE_MSG);
        ValidationResults result = MessageValidator.validate(param);
        assertNotNull(result);
        assertNotNull(result.getValidationStatus());
    }

    @Test
    public void testValidatePIXFeedPatientMergeWithNISTEVS() {
        ValidationParameters param = populateTestData(ValidationServiceEnum.NISTHL7V2VALIDATOR,
                ITI_DOMAIN, PIX_SOURCE_ACTOR, PIX_FEED_TRANSACTION, PIX_FEED_PATIENT_MERGE_MSG_TYPE, HL7_VERSION_2dot3dot1,
                PIX_FEED_PATIENT_MERGE_MSG);
        ValidationResults result = MessageValidator.validate(param);
        assertNotNull(result);
        assertNotNull(result.getValidationStatus());
    }

    @Test
    public void testValidatePIXFeedPatientAdmitAckWithNISTEVS() {
        ValidationParameters param = populateTestData(ValidationServiceEnum.NISTHL7V2VALIDATOR,
                ITI_DOMAIN, PIX_MANAGER_ACTOR, PIX_FEED_TRANSACTION, PIX_FEED_PATIENT_ADMIT_ACK_MSG_TYPE, HL7_VERSION_2dot3dot1,
                PIX_FEED_PATIENT_ADMIT_ACK_MSG);
        ValidationResults result = MessageValidator.validate(param);
        assertNotNull(result);
        assertNotNull(result.getValidationStatus());
    }

    @Test
    public void testValidatePIXFeedPatientRegisterAckWithNISTEVS() {
        ValidationParameters param = populateTestData(ValidationServiceEnum.NISTHL7V2VALIDATOR,
                ITI_DOMAIN, PIX_MANAGER_ACTOR, PIX_FEED_TRANSACTION, PIX_FEED_PATIENT_REGISTER_ACK_MSG_TYPE, HL7_VERSION_2dot3dot1,
                PIX_FEED_PATIENT_REGISTER_ACK_MSG);
        ValidationResults result = MessageValidator.validate(param);
        assertNotNull(result);
        assertNotNull(result.getValidationStatus());
    }

    @Test
    public void testValidatePIXFeedPatientPreAdmitAckWithNISTEVS() {
        ValidationParameters param = populateTestData(ValidationServiceEnum.NISTHL7V2VALIDATOR,
                ITI_DOMAIN, PIX_MANAGER_ACTOR, PIX_FEED_TRANSACTION, PIX_FEED_PATIENT_PRE_ADMIT_ACK_MSG_TYPE, HL7_VERSION_2dot3dot1,
                PIX_FEED_PATIENT_PRE_ADMIT_ACK_MSG);
        ValidationResults result = MessageValidator.validate(param);
        assertNotNull(result);
        assertNotNull(result.getValidationStatus());
    }

    @Test
    public void testValidatePIXFeedPatientUpdateAckWithNISTEVS() {
        ValidationParameters param = populateTestData(ValidationServiceEnum.NISTHL7V2VALIDATOR,
                ITI_DOMAIN, PIX_MANAGER_ACTOR, PIX_FEED_TRANSACTION, PIX_FEED_PATIENT_UPDATE_ACK_MSG_TYPE, HL7_VERSION_2dot3dot1,
                PIX_FEED_PATIENT_UPDATE_ACK_MSG);
        ValidationResults result = MessageValidator.validate(param);
        assertNotNull(result);
        assertNotNull(result.getValidationStatus());
    }

    @Test
    public void testValidatePIXFeedPatientMergeAckWithNISTEVS() {
        ValidationParameters param = populateTestData(ValidationServiceEnum.NISTHL7V2VALIDATOR,
                ITI_DOMAIN, PIX_MANAGER_ACTOR, PIX_FEED_TRANSACTION, PIX_FEED_PATIENT_MERGE_ACK_MSG_TYPE, HL7_VERSION_2dot3dot1,
                PIX_FEED_PATIENT_MERGE_ACK_MSG);
        ValidationResults result = MessageValidator.validate(param);
        assertNotNull(result);
        assertNotNull(result.getValidationStatus());
    }

    @Test
    public void testValidatePIXUpdateWithNISTEVS() {
        ValidationParameters param = populateTestData(ValidationServiceEnum.NISTHL7V2VALIDATOR,
                ITI_DOMAIN, PIX_MANAGER_ACTOR, PIX_UPDATE_TRANSACTION, PIX_UPDATE_MSG_TYPE, HL7_VERSION_2dot5, PIX_UPDATE_MSG);
        ValidationResults result = MessageValidator.validate(param);
        assertNotNull(result);
        assertNotNull(result.getValidationStatus());
    }

    @Test
    public void testValidatePIXUpdateAckWithNISTEVS() {
        ValidationParameters param = populateTestData(ValidationServiceEnum.NISTHL7V2VALIDATOR,
                ITI_DOMAIN, PAT_DEMOGRAPHIC_CONSUMER_ACTOR, PIX_UPDATE_ACK_TRANSACTION, PIX_UPDATE_MSG_ACK_TYPE, HL7_VERSION_2dot5,
                PIX_UPDATE_ACK_MSG);
        ValidationResults result = MessageValidator.validate(param);
        assertNotNull(result);
        assertNotNull(result.getValidationStatus());
    }

    @Test
    public void testValidatePIXQueryWithNISTEVS() {
        ValidationParameters param = populateTestData(ValidationServiceEnum.NISTHL7V2VALIDATOR,
                ITI_DOMAIN, PIX_CONSUMER_ACTOR, PIX_QUERY_TRANSACTION, PIX_QUERY_MSG_TYPE, HL7_VERSION_2dot5, PIX_QUERY_MSG);
        ValidationResults result = MessageValidator.validate(param);
        assertNotNull(result);
        assertNotNull(result.getValidationStatus());
    }

    @Test
    public void testValidatePIXQueryRspWithNISTEVS() {
        ValidationParameters param = populateTestData(ValidationServiceEnum.NISTHL7V2VALIDATOR,
                ITI_DOMAIN, PIX_MANAGER_ACTOR, PIX_QUERY_TRANSACTION, PIX_QUERY_MSG_RSP_TYPE, HL7_VERSION_2dot5, PIX_QUERY_RSP_MSG);
        ValidationResults result = MessageValidator.validate(param);
        assertNotNull(result);
        assertNotNull(result.getValidationStatus());
    }

    @Test
    public void testValidatePDCQueryWithNISTEVS() {
        ValidationParameters param = populateTestData(ValidationServiceEnum.NISTHL7V2VALIDATOR,
                ITI_DOMAIN, PAT_DEMOGRAPHIC_CONSUMER_ACTOR, PDQ_TRANSACTION, PDQ_MSG_TYPE, HL7_VERSION_2dot5, PDQ_QUERY_MSG);
        ValidationResults result = MessageValidator.validate(param);
        assertNotNull(result);
        assertNotNull(result.getValidationStatus());
    }

    @Test
    public void testValidatePDCQueryRspWithNISTEVS() {
        ValidationParameters param = populateTestData(ValidationServiceEnum.NISTHL7V2VALIDATOR,
                ITI_DOMAIN, PAT_DEMOGRAPHIC_SUPPLIER_ACTOR, PDQ_TRANSACTION, PDQ_MSG_RSP_TYPE, HL7_VERSION_2dot5, PDQ_QUERY_RSP_MSG);
        ValidationResults result = MessageValidator.validate(param);
        assertNotNull(result);
        assertNotNull(result.getValidationStatus());
    }

    @Test
    public void testValidateNISTPIXFeedPatientAdmitWithGazelleEVS() {
        ValidationParameters param = populateTestData(ValidationServiceEnum.GAZELLEHL7V2VALIDATOR,
                ITI_DOMAIN, PIX_SOURCE_ACTOR, PIX_FEED_TRANSACTION, PIX_FEED_PATIENT_ADMIT_MSG_TYPE, HL7_VERSION_2dot3dot1,
                PIX_FEED_PATIENT_ADMIT_MSG_NIST);
        ValidationResults result = MessageValidator.validate(param);
        assertNotNull(result);
        assertNotNull(result.getValidationStatus());
    }

    @Test
    public void testValidateNISTPIXFeedPatientRegisterWithGazelleEVS() {
        ValidationParameters param = populateTestData(ValidationServiceEnum.GAZELLEHL7V2VALIDATOR,
                ITI_DOMAIN, PIX_SOURCE_ACTOR, PIX_FEED_TRANSACTION, PIX_FEED_PATIENT_REGISTER_MSG_TYPE, HL7_VERSION_2dot3dot1,
                PIX_FEED_PATIENT_REGISTER_MSG_NIST);
        ValidationResults result = MessageValidator.validate(param);
        assertNotNull(result);
        assertNotNull(result.getValidationStatus());
    }

    @Test
    public void testValidateNISTPIXFeedPatientPreAdmitWithGazelleEVS() {
        ValidationParameters param = populateTestData(ValidationServiceEnum.GAZELLEHL7V2VALIDATOR,
                ITI_DOMAIN, PIX_SOURCE_ACTOR, PIX_FEED_TRANSACTION, PIX_FEED_PATIENT_PRE_ADMIT_MSG_TYPE, HL7_VERSION_2dot3dot1,
                PIX_FEED_PATIENT_PRE_ADMIT_MSG_NIST);
        ValidationResults result = MessageValidator.validate(param);
        assertNotNull(result);
        assertNotNull(result.getValidationStatus());
    }

    @Test
    public void testValidateNISTPIXFeedPatientUpdateWithGazelleEVS() {
        ValidationParameters param = populateTestData(ValidationServiceEnum.GAZELLEHL7V2VALIDATOR,
                ITI_DOMAIN, PIX_SOURCE_ACTOR, PIX_FEED_TRANSACTION, PIX_FEED_PATIENT_UPDATE_MSG_TYPE, HL7_VERSION_2dot3dot1,
                PIX_FEED_PATIENT_UPDATE_MSG_NIST);
        ValidationResults result = MessageValidator.validate(param);
        assertNotNull(result);
        assertNotNull(result.getValidationStatus());
    }

    @Test
    public void testValidateNISTPIXFeedPatientMergeWithGazelleEVS() {
        ValidationParameters param = populateTestData(ValidationServiceEnum.GAZELLEHL7V2VALIDATOR,
                ITI_DOMAIN, PIX_SOURCE_ACTOR, PIX_FEED_TRANSACTION, PIX_FEED_PATIENT_MERGE_MSG_TYPE, HL7_VERSION_2dot3dot1,
                PIX_FEED_PATIENT_MERGE_MSG_NIST);
        ValidationResults result = MessageValidator.validate(param);
        assertNotNull(result);
        assertNotNull(result.getValidationStatus());
    }

    @Test
    public void testValidateNISTPIXQueryWithGazelleEVS() {
        ValidationParameters param = populateTestData(ValidationServiceEnum.GAZELLEHL7V2VALIDATOR,
                ITI_DOMAIN, PIX_CONSUMER_ACTOR, PIX_QUERY_TRANSACTION, PIX_QUERY_MSG_TYPE, HL7_VERSION_2dot5, PIX_QUERY_MSG_NIST);
        ValidationResults result = MessageValidator.validate(param);
        assertNotNull(result);
        assertNotNull(result.getValidationStatus());
    }

    @Test
    public void testValidateNISTPDCQueryWithGazelleEVS() {
        ValidationParameters param = populateTestData(ValidationServiceEnum.GAZELLEHL7V2VALIDATOR,
                ITI_DOMAIN, PAT_DEMOGRAPHIC_CONSUMER_ACTOR, PDQ_TRANSACTION, PDQ_MSG_TYPE, HL7_VERSION_2dot5, PDQ_QUERY_MSG_NIST);
        ValidationResults result = MessageValidator.validate(param);
        assertNotNull(result);
        assertNotNull(result.getValidationStatus());
    }

    @Test
    public void testValidateNISTPIXFeedPatientAdmitWithNISTEVS() {
        ValidationParameters param = populateTestData(ValidationServiceEnum.NISTHL7V2VALIDATOR,
                ITI_DOMAIN, PIX_SOURCE_ACTOR, PIX_FEED_TRANSACTION, PIX_FEED_PATIENT_ADMIT_MSG_TYPE, HL7_VERSION_2dot3dot1,
                PIX_FEED_PATIENT_ADMIT_MSG_NIST);
        ValidationResults result = MessageValidator.validate(param);
        assertNotNull(result);
        assertNotNull(result.getValidationStatus());
    }

    @Test
    public void testValidateNISTPIXFeedPatientRegisterWithNISTEVS() {
        ValidationParameters param = populateTestData(ValidationServiceEnum.NISTHL7V2VALIDATOR,
                ITI_DOMAIN, PIX_SOURCE_ACTOR, PIX_FEED_TRANSACTION, PIX_FEED_PATIENT_REGISTER_MSG_TYPE, HL7_VERSION_2dot3dot1,
                PIX_FEED_PATIENT_REGISTER_MSG_NIST);
        ValidationResults result = MessageValidator.validate(param);
        assertNotNull(result);
        assertNotNull(result.getValidationStatus());
    }

    @Test
    public void testValidateNISTPIXFeedPatientPreAdmitWithNISTEVS() {
        ValidationParameters param = populateTestData(ValidationServiceEnum.NISTHL7V2VALIDATOR,
                ITI_DOMAIN, PIX_SOURCE_ACTOR, PIX_FEED_TRANSACTION, PIX_FEED_PATIENT_PRE_ADMIT_MSG_TYPE, HL7_VERSION_2dot3dot1,
                PIX_FEED_PATIENT_PRE_ADMIT_MSG_NIST);
        ValidationResults result = MessageValidator.validate(param);
        assertNotNull(result);
        assertNotNull(result.getValidationStatus());
    }

    @Test
    public void testValidateNISTPIXFeedPatientUpdateWithNISTEVS() {
        ValidationParameters param = populateTestData(ValidationServiceEnum.NISTHL7V2VALIDATOR,
                ITI_DOMAIN, PIX_SOURCE_ACTOR, PIX_FEED_TRANSACTION, PIX_FEED_PATIENT_UPDATE_MSG_TYPE, HL7_VERSION_2dot3dot1,
                PIX_FEED_PATIENT_UPDATE_MSG_NIST);
        ValidationResults result = MessageValidator.validate(param);
        assertNotNull(result);
        assertNotNull(result.getValidationStatus());
    }

    @Test
    public void testValidateNISTPIXFeedPatientMergeWithNISTEVS() {
        ValidationParameters param = populateTestData(ValidationServiceEnum.NISTHL7V2VALIDATOR,
                ITI_DOMAIN, PIX_SOURCE_ACTOR, PIX_FEED_TRANSACTION, PIX_FEED_PATIENT_MERGE_MSG_TYPE, HL7_VERSION_2dot3dot1,
                PIX_FEED_PATIENT_MERGE_MSG_NIST);
        ValidationResults result = MessageValidator.validate(param);
        assertNotNull(result);
        assertNotNull(result.getValidationStatus());
    }

    @Test
    public void testValidateNISTPIXQueryWithNISTEVS() {
        ValidationParameters param = populateTestData(ValidationServiceEnum.NISTHL7V2VALIDATOR,
                ITI_DOMAIN, PIX_CONSUMER_ACTOR, PIX_QUERY_TRANSACTION, PIX_QUERY_MSG_TYPE, HL7_VERSION_2dot5, PIX_QUERY_MSG_NIST);
        ValidationResults result = MessageValidator.validate(param);
        assertNotNull(result);
        assertNotNull(result.getValidationStatus());
    }

    @Test
    public void testValidateNISTPDCQueryWithNISTEVS() {
        ValidationParameters param = populateTestData(ValidationServiceEnum.NISTHL7V2VALIDATOR,
                ITI_DOMAIN, PAT_DEMOGRAPHIC_CONSUMER_ACTOR, PDQ_TRANSACTION, PDQ_MSG_TYPE, HL7_VERSION_2dot5, PDQ_QUERY_MSG_NIST);
        ValidationResults result = MessageValidator.validate(param);
        assertNotNull(result);
        assertNotNull(result.getValidationStatus());
    }

    private ValidationParameters populateTestData(ValidationServiceEnum key, String domain, String actor, String transaction, String messageType,
                                                  String hl7Version, String message) {
        ValidationService validationService = getValidationServiceByKey(key);
        ValidationParameters params = new ValidationParameters(domain, actor, transaction, null, messageType, hl7Version, key, validationService
                .getBaseUrl() + (validationService.getUrlPath() != null ? validationService.getUrlPath() : ""), message);
        return params;
    }

    private synchronized ValidationService getValidationServiceByKey(ValidationServiceEnum key) {
        Query query = em.createQuery("FROM ValidationService vs where vs.key=:key");
        query.setParameter("key", key);
        query.setHint("org.hibernate.cacheable", true);
        return (ValidationService) query.getSingleResult();
    }
}

